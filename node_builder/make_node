#!/usr/bin/env bash
set -Eeuo pipefail


# Using a work directory under `/tmp` so I can be lazy and not care about
# cleaning up the mount points debootstrap creates if things go awry. I reboot
# my machines pretty frequently so this will resolve itself.
WORK_DIR=$(mktemp -d --tmpdir=/tmp debootstrap.XXXX)
CHROOT_DIR="$1"

GIT_REF=$(git rev-parse --short HEAD)
# Should this build be marked as dirty?
# todo: in the future: maybe a mark work worker nodes to run dirty builds?
GIT_DIRTY="-dirty"
git diff-index --quiet HEAD -- && GIT_DIRTY=
BUILD_TIMESTAMP=$(date --utc --iso-8601=seconds)
OUT_DIR="$1/$BUILD_TIMESTAMP-${GIT_REF}${GIT_DIRTY}"
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
DEB_BOOTSTRAP=/tmp/debootstrap_cache

# do this early so if there is a GPG error it fails fast
# todo: could this be passed in a node boot time with an boot arg?
ENCRYPT_KEY=${CONSUL_ENCRYPT_KEY:-"$2"}


# future: this can be split into two separate process to generate the
# kerne;/initramfs and the process to create the rootramfs. This would allow
# easier updating on one or the other. For now, simplicity wins.
# todo: symlink these?
# todo: which versions do I really need?
cp --dereference "$CHROOT_DIR"/boot/vmlinuz-* "$OUT_DIR/"
ln -rs "$OUT_DIR/vmlinuz"* "$OUT_DIR/vmlinuz"

cp --dereference "$CHROOT_DIR"/boot/initrd.img-* "$OUT_DIR/"
ln -rs "$OUT_DIR/initrd.img-"* "$OUT_DIR/initrd.img"

# now that we have generated the initrd and kerenl, we can remove files that
# are not needed within the ramFS.
rm -fr "$CHROOT_DIR/tmp/*"
rm -fr "$CHROOT_DIR/var/cache" # is this safe?
rm "$CHROOT_DIR"/boot/vmlinuz-*
rm "$CHROOT_DIR"/boot/initrd.img-*

# now getting risky...
# These modules aren't used on my board, but I should comment these out if I
# seem to be having weird runtime issues.
rm -fr "$CHROOT_DIR"/usr/lib/firmware/netronome
rm -fr "$CHROOT_DIR"/usr/lib/firmware/liquidio
rm -fr "$CHROOT_DIR"/usr/lib/firmware/amdgpu
rm -fr "$CHROOT_DIR"/usr/lib/modules/5.3.0-18-generic/kernel/drivers/net/wireless

pushd "$CHROOT_DIR" > /dev/null && {
  # todo: I feel like there should be an easier way to do this.
  tar -cf "$WORK_DIR/ramroot.tar" .
}
popd > /dev/null

# This can take a while. Write to a temp file before copying it over to the
# outfolder so its not in an intermediate state for too long.
pixz "-$PIXZ_COMPRESSION_LEVEL" < "$WORK_DIR/ramroot.tar" > "$WORK_DIR/ramroot.tar.xz"



cp "$WORK_DIR/ramroot.tar.xz" "$OUT_DIR/ramroot.tar.xz"

# set the permissions on the artifacts so they can be consumed by a normal user.
chown "$(whoami)" "$OUT_DIR"
chmod -R 755 "$OUT_DIR"
