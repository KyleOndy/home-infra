#!/usr/bin/env bash
set -Eeuo pipefail

# helper script to run bash scripts within the chroot we just created.

echo " Running '$*'"
# todo: I am just giving every script my consul encryption key. This is a
# pretty bad security issues, but I also control all the scripts running, so
# its not too terrible. I need to work out how to best propagate secrets into
# all the configuration files.

# shellcheck disable=SC2024
# deep breath. Stuff of madness or genious below. The goal here is to be able
# to write scripts in a normal way, refrencing files alongside or deeper in
# the file hiarchery. This way I don't need to heredoc every config file
# inline with a script. However, some of my "scripts" are still just text,
# hence having to check if this "script" lives under /prod/self/fd.
#
# I suppose there is some edge case where I actaully write a script under
# /prod/self/fd/ and it doesn't work as expeced?

# todo: tmpdir
tmp_script_dir_in_chroot="/tmp/chroot-script"
script="$1"
args=( "${@:2}" ) # could be empty
script_dir=$(dirname "$script")
module_name=$(basename "$script_dir")
script_name=$(basename "$script")

# debug info
#echo "tmp_script_dir_in_chroot: $tmp_script_dir_in_chroot"
#echo "script: $script"
#echo "args: ${args[*]}"
#echo "script_dir: $script_dir"
#echo "module_name: $module_name"
#echo "script_name: $script_name"

mkdir -p "$CHROOT_DIR/$tmp_script_dir_in_chroot"
if [[ "$script_dir" == "/dev/fd" ]]; then
  # copy just the text "script"
  module_name="inline"
  mkdir "$CHROOT_DIR/$tmp_script_dir_in_chroot/$module_name"
  cp --dereference "$script" "$CHROOT_DIR/$tmp_script_dir_in_chroot/$module_name/"
else
  # copy the whole module directory
  cp -r --dereference "$script_dir" "$CHROOT_DIR/$tmp_script_dir_in_chroot/"
fi

chroot "$CHROOT_DIR" /usr/bin/env PATH=/usr/sbin:/usr/bin/:/bin:/sbin:/usr/local/bin bash "$tmp_script_dir_in_chroot/$module_name/$script_name" "${args[@]}"

rm -r "${CHROOT_DIR:?}/$tmp_script_dir_in_chroot"
